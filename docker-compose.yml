services:
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: codearena_backend
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy # Changed to service_healthy for robustness
      kafka:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - WATCHPACK_POLLING=true
    volumes:
      - ./apps/backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - codearena-net

  executor:
    build:
      context: ./apps/executor-service
      dockerfile: Dockerfile
    container_name: codearena_executor
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      judge0:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JUDGE0_URL=${JUDGE0_URL}
      - WATCHPACK_POLLING=true
    volumes:
      - ./apps/executor-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - codearena-net

  judge0:
    image: judge0/judge0:1.13.0
    container_name: codearena_judge0
    privileged: true
    ports:
      - "2358:2358"
    depends_on:
      postgres:
        condition: service_healthy
      # --- FIX 1: ADDED DEPENDENCY ON REDIS ---
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379/0
      # --- FIX 2: POINTED TO THE CORRECT DATABASE ---
      - DATABASE_URL=postgresql://user:password@postgres:5432/codearena
      - RAILS_ENV=production
    networks:
      - codearena-net
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:2358/languages || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    image: postgres:15
    container_name: codearena_postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: codearena
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d codearena"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - codearena-net

  redis:
    image: redis:6-alpine # Using a specific version is good practice
    container_name: codearena_redis
    ports:
      - "6380:6379"
    restart: unless-stopped
    # --- FIX 1 (Part B): ADDED HEALTHCHECK TO REDIS ---
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - codearena-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: codearena_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
    healthcheck:
        test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 | grep imok"]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - codearena-net

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: codearena_kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:29092"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - codearena-net

volumes:
  postgres_data:

networks:
  codearena-net:
    driver: bridge
